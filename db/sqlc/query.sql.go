// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :execresult
INSERT INTO todos (id, task, status)
VALUES (?, ?, ?)
`

type CreateTodoParams struct {
	ID     string
	Task   string
	Status string
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTodo, arg.ID, arg.Task, arg.Status)
}

const readTodo = `-- name: ReadTodo :one
SELECT id, task, status, created_at
FROM todos
WHERE id = ?
`

func (q *Queries) ReadTodo(ctx context.Context, id string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, readTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Task,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const readTodos = `-- name: ReadTodos :many
SELECT id, task, status, created_at
FROM todos
ORDER BY created_at DESC
`

func (q *Queries) ReadTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, readTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Task,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTodos = `-- name: SearchTodos :many
SELECT t.id, t.task, t.status, t.created_at
FROM todos t
         JOIN todos_search ts ON t.id = ts.id
WHERE ts.task LIKE ?
ORDER BY RANK LIMIT 20
`

func (q *Queries) SearchTodos(ctx context.Context, task string) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, searchTodos, task)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Task,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTodosOld = `-- name: SearchTodosOld :many
SELECT t.id, t.task, t.status, t.created_at
FROM todos t
         JOIN todos_search ts ON t.id = ts.id
WHERE ts.task MATCH ?
`

func (q *Queries) SearchTodosOld(ctx context.Context, task string) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, searchTodosOld, task)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Task,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
SET task   = ?,
    status = ?
WHERE id = ?
RETURNING id, task, status, created_at
`

type UpdateTodoParams struct {
	Task   string
	Status string
	ID     string
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo, arg.Task, arg.Status, arg.ID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Task,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
