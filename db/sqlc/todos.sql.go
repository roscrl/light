// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: todos.sql

package sqlc

import (
	"context"
	"database/sql"
)

const deleteTodoByID = `-- name: DeleteTodoByID :exec
DELETE FROM todos
WHERE id = ?
`

func (q *Queries) DeleteTodoByID(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTodoByID, id)
	return err
}

const getAllTodos = `-- name: GetAllTodos :many
SELECT id, task, status, created_at
FROM todos
ORDER BY created_at DESC
`

func (q *Queries) GetAllTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getAllTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Task,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodoByID = `-- name: GetTodoByID :one
SELECT id, task, status, created_at
FROM todos
WHERE id = ?
`

func (q *Queries) GetTodoByID(ctx context.Context, id string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoByID, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Task,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const newTodo = `-- name: NewTodo :execresult
INSERT INTO todos (id, task, status)
VALUES (?, ?, ?)
`

type NewTodoParams struct {
	ID     string
	Task   string
	Status string
}

func (q *Queries) NewTodo(ctx context.Context, arg NewTodoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, newTodo, arg.ID, arg.Task, arg.Status)
}

const searchTodosByTask = `-- name: SearchTodosByTask :many
SELECT t.id, t.task, t.status, t.created_at
FROM todos t
         JOIN todos_search ts ON t.id = ts.id
WHERE ts.task LIKE ?
ORDER BY RANK LIMIT 20
`

func (q *Queries) SearchTodosByTask(ctx context.Context, task string) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, searchTodosByTask, task)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Task,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodoByID = `-- name: UpdateTodoByID :one
UPDATE todos
SET task   = ?,
    status = ?
WHERE id = ?
RETURNING id, task, status, created_at
`

type UpdateTodoByIDParams struct {
	Task   string
	Status string
	ID     string
}

func (q *Queries) UpdateTodoByID(ctx context.Context, arg UpdateTodoByIDParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodoByID, arg.Task, arg.Status, arg.ID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Task,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
